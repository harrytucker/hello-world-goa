// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Example Service gRPC client encoders and decoders
//
// Command:
// $ goa gen github.com/harrytucker/hello-world-goa/design

package client

import (
	"context"

	example_servicepb "github.com/harrytucker/hello-world-goa/gen/grpc/example_service/pb"
	goagrpc "goa.design/goa/v3/grpc"
	"google.golang.org/grpc"
	"google.golang.org/grpc/metadata"
)

// BuildSayHelloFunc builds the remote method to invoke for "Example Service"
// service "Say Hello" endpoint.
func BuildSayHelloFunc(grpccli example_servicepb.ExampleServiceClient, cliopts ...grpc.CallOption) goagrpc.RemoteFunc {
	return func(ctx context.Context, reqpb interface{}, opts ...grpc.CallOption) (interface{}, error) {
		for _, opt := range cliopts {
			opts = append(opts, opt)
		}
		if reqpb != nil {
			return grpccli.SayHello(ctx, reqpb.(*example_servicepb.SayHelloRequest), opts...)
		}
		return grpccli.SayHello(ctx, &example_servicepb.SayHelloRequest{}, opts...)
	}
}

// DecodeSayHelloResponse decodes responses from the Example Service Say Hello
// endpoint.
func DecodeSayHelloResponse(ctx context.Context, v interface{}, hdr, trlr metadata.MD) (interface{}, error) {
	message, ok := v.(*example_servicepb.SayHelloResponse)
	if !ok {
		return nil, goagrpc.ErrInvalidType("Example Service", "Say Hello", "*example_servicepb.SayHelloResponse", v)
	}
	res := NewSayHelloResult(message)
	return res, nil
}
