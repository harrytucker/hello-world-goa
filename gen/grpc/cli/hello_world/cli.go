// Code generated by goa v3.0.7, DO NOT EDIT.
//
// Hello world! gRPC client CLI support package
//
// Command:
// $ goa gen github.com/harrytucker/hello-world-goa/design

package cli

import (
	"flag"
	"fmt"
	"os"

	examplec "github.com/harrytucker/hello-world-goa/gen/grpc/example/client"
	goa "goa.design/goa/v3/pkg"
	grpc "google.golang.org/grpc"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `example hello
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` example hello` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(cc *grpc.ClientConn, opts ...grpc.CallOption) (goa.Endpoint, interface{}, error) {
	var (
		exampleFlags = flag.NewFlagSet("example", flag.ContinueOnError)

		exampleHelloFlags = flag.NewFlagSet("hello", flag.ExitOnError)
	)
	exampleFlags.Usage = exampleUsage
	exampleHelloFlags.Usage = exampleHelloUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "example":
			svcf = exampleFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "example":
			switch epn {
			case "hello":
				epf = exampleHelloFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "example":
			c := examplec.NewClient(cc, opts...)
			switch epn {
			case "hello":
				endpoint = c.Hello()
				data = nil
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// exampleUsage displays the usage of the example command and its subcommands.
func exampleUsage() {
	fmt.Fprintf(os.Stderr, `The example service returns a hello world message
Usage:
    %s [globalflags] example COMMAND [flags]

COMMAND:
    hello: Hello implements hello.

Additional help:
    %s example COMMAND --help
`, os.Args[0], os.Args[0])
}
func exampleHelloUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] example hello

Hello implements hello.

Example:
    `+os.Args[0]+` example hello
`, os.Args[0])
}
